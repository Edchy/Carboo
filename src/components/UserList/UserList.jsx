import { useEffect, useState } from "react";
import { usePrev } from "../../customHooks/CustomHooks";
import UserListItem from "../UserListItem/UserListItem";
import "./userlist.css";

// rendera listan med nutrienter som anv칛ndaren l칛gger till
export default function UserList({ userList, onDelete }) {
  // Jag ville p친 n친got s칛tt 칬ka UX genom att l친ta anv칛ndaren f친 feedback p친 n칛r man l칛gger till objekt i listan eller n칛r ett objekt som redan finns i listan uppdateras. En visuell markering som visar vad det 칛r som h칛nder n칛r "l칛gga till knappen" klickas. Visste inte riktigt hur jag skulle g칬ra detta och jag provade olika l칬sningar utan st칬rre framg친ng. Tillslut efter massa googlande, stack overflowande och dividerande med chatGPT hittade jag en l칬sning som fungerade. Jag kan inte s칛ga att jag helt och h친llet f칬rst친r l칬sningen, d친 den introducerade, f칬r mig, ett nytt koncept - Set().

  // Min tanke var att varje g친ng den h칛r komponenten renderas (vilket den g칬r varje g친ng ett objekt uppdateras eller l칛ggs till i userList) s친 ska den tidigare userList j칛mf칬ras med den nya. Om n친got har 칛ndrats s친 ska det elementet f친 ett klassnamn och en animation via klassnamnet.

  // state att lagra nya eller uppdaterade objekt. Set till친ter inte dubbletter.
  const [newOrUpdated, setNewOrUpdated] = useState(new Set());

  // i denna variabel sparas det tidigare v칛rdet f칬r userList (fr친n renderingen innan). detta genom att anv칛nda en "custom hook" som importeras fr친n min customhooks fil.
  const prevUserList = usePrev(userList);

  // k칬rs n칛r userList och prevUserList uppdateras och j칛mf칬r dessa tv친 f칬r att se om n친got 칛r nytt eller 칛ndrat
  useEffect(() => {
    // if-satsen 칛r h칛r f칬r att prevUserList inte kommer finnas p친 f칬rsta render.
    if (prevUserList) {
      // spara nya eller uppdaterade objekt
      const newNewOrUpdated = new Set();

      // loopa igenom den nuvarande listan och hitta objekt med samma namn i f칬rra listan. spara i variabel.
      userList.forEach((item) => {
        const prevItem = prevUserList.find((prev) => prev.name === item.name);

        // om prevItem 칛r false(namnet finns inte med i f칬rra listan). D친 betyder det att det 칛r ett nytt objekt och ska l칛ggas till.
        // eller om v칛rdet f칬r nyckeln serving_size_g inte 칛r samma i gamla och nya listan. D친 칛r v칛rdet uppdaterat och ska l칛ggas till.
        if (!prevItem || prevItem.serving_size_g !== item.serving_size_g) {
          newNewOrUpdated.add(item.name);
        }
      });
      // om settets size nu 칛r st칬rre 칛n noll s친 finns det nya eller uppdaterade objekt och state s칛tts d친 till detta.
      if (newNewOrUpdated.size > 0) {
        setNewOrUpdated(newNewOrUpdated);
      }
    }
    // efter en halv sekund "nollst칛lls" state, tillr칛ckligt f칬r att kunna ge en indikation i UI att n친got har uppdaterats
    const timer = setTimeout(() => setNewOrUpdated(new Set()), 500);
    return () => clearTimeout(timer);
  }, [userList, prevUserList]);

  return (
    <ul className="user-list">
      {/* om det finns n친got i listan - "mappar ut" varje objekt till instans av en komponent som tar in objektet som prop */}
      {userList.length > 0 ? (
        userList.map((item) => (
          <UserListItem
            onDelete={onDelete}
            item={item}
            key={item.name}
            // Kolla om item.name finns i changedItems (t.ex "bananas"), isf ge klass .
            className={newOrUpdated.has(item.name) ? "highlight" : ""}
          />
        ))
      ) : (
        <p className="empty-text">游꼛 游꼘 游볳 游꼚</p> // om inget finns visa "banan melon kiwi och citron"
      )}
    </ul>
  );
}
